generator client {
  provider   = "prisma-client-js"
  engineType = "dataproxy"
}

generator typegraphql {
  provider               = "typegraphql-prisma"
  output                 = "../src/generated/typegraphql-prisma"
  emitTranspiledCode     = false
  contextPrismaKey       = "prisma"
  prismaClientImportPath = "../src/prismaClient.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

/// ### Enums

// Represents the levels of overall market sentiment. Used in MarketSentiment
enum MarketSentimentLevel {
  /// Extremely negative outlook on the market.
  VERY_BEARISH

  /// Moderately negative outlook on the market.
  SOMEWHAT_BEARISH

  /// Negative outlook on the market.
  BEARISH

  /// Neutral outlook on the market.
  NEUTRAL

  /// Positive outlook on the market.
  SOMEWHAT_BULLISH

  /// Moderately positive outlook on the market.
  BULLISH

  /// Extremely positive outlook on the market.
  VERY_BULLISH
}

// Defines the different roles a user can have within the platform, determining their permissions and access levels.
enum UserRole {
  /// The primary owner with full control over the platform.
  OWNER

  /// An administrative user with elevated permissions.
  ADMIN

  /// A regular user with standard access.
  USER
}

enum ScheduledOptionOrderStatus {
  /// The scheduled option order is pending and has not yet been processed.
  PENDING

  /// The scheduled option order has been executed but not yet finalized.
  EXECUTED

  /// The scheduled option order has been fully completed.
  CANCELED
}

// Represents the various types of strategies that can be used for trading.
enum TradeStrategy {
  /// Analyzes historical price data to predict future movements.
  TECHNICAL_ANALYSIS

  /// Follows the trend of an asset's price movement.
  TREND_FOLLOWING

  /// Capitalizes on price discrepancies between assets.
  MEAN_REVERSION

  /// Utilizes momentum to amplify returns on investments.
  MOMENTUM_STRATEGY

  /// Uses news events to predict and capitalize on market movements.
  NEWS_BASED_STRATEGY

  /// Profits from small price changes by executing numerous trades.
  SCALPING

  /// Trades based on volatility patterns in the market.
  VOLATILITY_TRADING

  /// Executes trades based on economic indicators and data releases.
  EVENT_DRIVEN

  /// Trades based on breakout patterns from established support or resistance levels.
  BREAKOUT_STRATEGY

  /// Trades based on the flow and volume of orders in the market.
  ORDER_FLOW_TRADING

  /// Utilizes options trading strategies to manage risk and enhance returns.
  OPTIONS_SPREAD

  /// No specific strategy or approach to trading.
  NO_STRATEGY
}

// Represents the various types of signals that can be discerned from market data.
enum TradeSignal {
  /// A bullish signal when a short-term moving average crosses above a long-term moving average.
  GOLDEN_CROSS

  /// A bearish signal when a short-term moving average crosses below a long-term moving average.
  DEATH_CROSS

  /// Signal generated when a short-term moving average crosses above or below a long-term moving average.
  MOVING_AVERAGE_CROSSOVER

  /// Indicates that the Relative Strength Index (RSI) is over the overbought threshold.
  RSI_OVERBOUGHT

  /// Indicates that the Relative Strength Index (RSI) is below the oversold threshold.
  RSI_OVERSOLD

  /// A signal generated by the Moving Average Convergence Divergence (MACD) indicator crossing.
  MACD_CROSSOVER

  /// Occurs when the price breaks above or below the Bollinger Bands.
  BOLLINGER_BANDS_BREAKOUT

  /// A signal indicating a reversal in the current trend.
  TREND_REVERSAL

  /// Signals based on specific price patterns and actions.
  PRICE_ACTION

  /// A surge in the implied volatility of options contracts.
  IMPLIED_VOLATILITY_SURGE

  /// When the price breaks above a resistance level, indicating potential upward movement.
  BREAKOUT_ABOVE_RESISTANCE

  /// When the price breaks below a support level, indicating potential downward movement.
  BREAKDOWN_BELOW_SUPPORT

  /// When the price holds above a support level, indicating strength.
  SUPPORT_LEVEL_HOLD

  /// When the price holds below a resistance level, indicating weakness.
  RESISTANCE_LEVEL_HOLD

  /// Signals based on Fibonacci retracement levels.
  FIBONACCI_RETRACEMENT

  /// Indicates that the Stochastic Oscillator is below the oversold threshold.
  STOCHASTIC_OVERSOLD

  /// Indicates that the Stochastic Oscillator is above the overbought threshold.
  STOCHASTIC_OVERBOUGHT

  /// Signals based on pivot point levels.
  PIVOT_POINT

  /// A sudden surge in trading volume.
  VOLUME_SURGE

  /// Level indicating potential mean reversion trading opportunities.
  MEAN_REVERSION_LEVEL

  /// Changes in news sentiment related to the asset.
  NEWS_SENTIMENT_CHANGE

  /// Triggers based on sentiment analysis.
  SENTIMENT_ANALYSIS_TRIGGER

  /// Strong gap up with volume confirmation indicating potential upward momentum.
  GAP_AND_GO_LONG

  /// Strong gap down with volume confirmation indicating potential downward momentum.
  GAP_AND_GO_SHORT

  /// Gap down showing reversal signs indicating potential upward reversal.
  GAP_FADE_LONG

  /// Gap up showing reversal signs indicating potential downward reversal.
  GAP_FADE_SHORT

  /// Opening Range Breakout indicating potential continuation of the trend.
  ORB_BREAKOUT

  /// Opening Range Breakdown indicating potential reversal of the trend.
  ORB_BREAKDOWN

  /// Price bouncing off VWAP indicating potential support.
  VWAP_BOUNCE

  /// Price rejecting from VWAP indicating potential resistance.
  VWAP_REJECTION

  /// No clear early market signal detected.
  NO_EARLY_SIGNAL

  /// No specific signal or reason for the trade.
  NO_SIGNAL
}

// Represents the various types of financial assets supported by the trading platform.
enum AssetType {
  /// Represents a share of ownership in a corporation.
  STOCK

  /// Exchange-Traded Fund, a type of investment fund traded on stock exchanges.
  ETF

  /// A mutual fund that pools money from many investors to purchase securities.
  MUTUAL_FUND

  /// Digital or virtual currencies using cryptography for security.
  CRYPTOCURRENCY

  /// A market index representing a collection of stocks.
  INDEX

  /// Physical goods such as gold, oil, or agricultural products.
  COMMODITY

  /// Traditional currencies used in international trade.
  CURRENCY

  /// Contracts that give the holder the right to buy or sell an asset at a set price.
  OPTION

  /// Financial contracts obligating the buyer to purchase an asset at a future date.
  FUTURE

  /// Debt securities issued by entities to raise capital.
  BOND

  /// Securities that give the holder the right to purchase stock at a specific price.
  WARRANT

  /// American Depositary Receipts representing shares in foreign companies.
  ADR

  /// Global Depositary Receipts representing shares in foreign companies.
  GDR

  /// Units of ownership in investment funds or trusts.
  UNIT

  /// Rights granted to shareholders, such as voting or dividend rights.
  RIGHT

  /// Real Estate Investment Trusts, companies that own or finance income-producing real estate.
  REIT

  /// Investment products structured to meet specific needs.
  STRUCTURED_PRODUCT

  /// Financial contracts to exchange cash flows between parties.
  SWAP

  /// Immediate exchange of financial instruments.
  SPOT

  /// Agreements to buy or sell an asset at a future date.
  FORWARD

  /// Any other type of asset not classified above.
  OTHER
}

// Specifies the type of Alpaca account being used.
enum AlpacaAccountType {
  /// A simulated trading account for testing strategies without real money.
  PAPER

  /// A live trading account with real funds.
  LIVE
}

// Enumerates the possible actions that can be performed on an action under a trade.
enum ActionType {
  /// Initiates a purchase of an asset.
  BUY

  /// Identifies a suitable option contract and initiates its purchase.
  BUY_OPTION

  /// Exercises an option to buy or sell the underlying asset.
  EXERCISE_OPTION

  /// Initiates the sale of an asset.
  SELL

  /// Cancels an existing trade action.
  CANCEL

  /// Modifies the parameters of an existing trade.
  ADJUST

  /// Implements a hedging strategy to mitigate risk.
  HEDGE
}

// Represents the current status of a trade action.
enum ActionStatus {
  /// The trade action is planned and awaiting execution.
  STAGED

  /// The trade action has been sent to the broker for processing, but not yet executed.
  PENDING

  /// The trade action has been executed but not yet finalized.
  EXECUTED

  /// The trade action has been fully completed.
  COMPLETED

  /// The trade action have been canceled.
  CANCELED
}

// Indicates the current status of a trade.
enum TradeStatus {
  /// The trade is pending and has not yet been processed.
  PENDING

  /// The trade is currently open and active.
  OPEN

  /// The trade is partially filled.
  PARTIAL

  /// The trade has been fully completed.
  COMPLETED

  /// The trade has been canceled.
  CANCELED
}

// Categorizes the types of alerts that can be generated.
enum AlertType {
  /// Indicates a successful operation or event.
  SUCCESS

  /// Represents a warning that requires attention.
  WARNING

  /// Signifies an error that needs to be addressed.
  ERROR

  /// Provides informational messages to the user.
  INFO
}

// Specifies the importance level of an event.
enum EventImportance {
  /// Low importance events with minimal impact.
  LOW

  /// Medium importance events with noticeable impact.
  MEDIUM

  /// High importance events with significant impact.
  HIGH
}

// Defines the subscription plans available to users.
enum SubscriptionPlan {
  /// A free trial plan with basic features, suitable for new users.
  FREE

  /// A professional plan with enhanced features, suitable for individual traders and investors.
  PRO

  /// An institutional plan with advanced features, suitable for institutional funds, hedge funds, and family offices.
  INSTITUTION
}

// OpenAI API language models available for text generation.
enum OpenaiModel {
  /// gpt-4o model (OpenAI's high-intelligence flagship model for complex, multi-step tasks)
  GPT_4O

  /// gpt-4o-mini model (OpenAI's affordable and intelligent small model for fast, lightweight tasks)
  GPT_4O_MINI

  /// o1 model (OpenAI's latest model, trained with reinforcement learning to perform complex reasoning)
  O1

  /// o1-mini model (OpenAI's lightweight model for quick, simple tasks, of its latest language model)
  O1_MINI

  /// o3-mini model (OpenAI's small model, trained with reinforcement learning to perform complex reasoning)
  O3_MINI

  /// o1-preview model (OpenAI's latest model, trained with reinforcement learning to perform complex reasoning)
  O1_PREVIEW
}

// Defines the status of model versions during their lifecycle.
enum ModelVersionStatus {
  /// Model is currently being trained.
  TRAINING

  /// Model is being validated before deployment.
  VALIDATION

  /// Model is deployed and actively used.
  DEPLOYED

  /// Model has been deprecated and replaced.
  DEPRECATED

  /// Model training or deployment failed.
  FAILED
}

// Defines the deployment environment for models.
enum DeploymentEnvironment {
  /// Development environment for testing.
  DEVELOPMENT

  /// Staging environment for pre-production testing.
  STAGING

  /// Production environment for live usage.
  PRODUCTION
}

// Defines rollout strategies for model deployment.
enum RolloutStrategy {
  /// Deploy immediately to all traffic.
  IMMEDIATE

  /// Gradually increase traffic allocation.
  GRADUAL

  /// Deploy to small percentage of traffic first.
  CANARY

  /// Use blue-green deployment strategy.
  BLUE_GREEN
}

// Defines artifact types for storing model components.
enum ArtifactType {
  /// Model weights file.
  WEIGHTS

  /// Complete model file.
  MODEL_FILE

  /// Data preprocessing component.
  PREPROCESSOR

  /// Feature transformation component.
  FEATURE_TRANSFORMER

  /// Ensemble configuration.
  ENSEMBLE_CONFIG
}

// Defines storage providers for model artifacts.
enum StorageProvider {
  /// Amazon S3 storage.
  AWS_S3

  /// Google Cloud Storage.
  GCP_STORAGE

  /// Azure Blob Storage.
  AZURE_BLOB

  /// Local filesystem storage.
  LOCAL
}

// Defines the status of A/B tests.
enum ABTestStatus {
  /// Test is in draft state.
  DRAFT

  /// Test is currently running.
  RUNNING

  /// Test has been completed.
  COMPLETED

  /// Test has been cancelled.
  CANCELLED
}

// Defines recommendations from A/B test results.
enum ABTestRecommendation {
  /// Promote the treatment version.
  PROMOTE_TREATMENT

  /// Keep the control version.
  KEEP_CONTROL

  /// Results are inconclusive.
  INCONCLUSIVE
}

// Defines the types of system alerts.
enum SystemAlertType {
  /// Performance degradation detected.
  PERFORMANCE_DEGRADATION

  /// Model training failure.
  TRAINING_FAILURE

  /// Deployment issue encountered.
  DEPLOYMENT_ISSUE

  /// Data quality problems detected.
  DATA_QUALITY

  /// Resource limit reached.
  RESOURCE_LIMIT

  /// General system alert.
  GENERAL
}

// Defines the severity levels of system alerts.
enum AlertSeverity {
  /// Low priority alert.
  LOW

  /// Medium priority alert.
  MEDIUM

  /// High priority alert.
  HIGH

  /// Critical priority alert requiring immediate attention.
  CRITICAL
}

// Defines the status of system alerts.
enum SystemAlertStatus {
  /// Alert is active and needs attention.
  ACTIVE

  /// Alert has been acknowledged by someone.
  ACKNOWLEDGED

  /// Alert has been resolved.
  RESOLVED

  /// Alert has been suppressed temporarily.
  SUPPRESSED
}

// Defines the types of feature importance analysis methods.
enum FeatureImportanceAnalysisType {
  /// SHAP (SHapley Additive exPlanations) analysis.
  SHAP

  /// Permutation importance analysis.
  PERMUTATION

  /// LIME (Local Interpretable Model-agnostic Explanations) analysis.
  LIME

  /// Integrated gradients analysis.
  INTEGRATED_GRADIENTS

  /// Feature ablation analysis.
  FEATURE_ABLATION
}

// Defines the exit reasons for trades in training data.
enum TradeExitReason {
  /// Trade exited due to stop loss.
  STOP_LOSS

  /// Trade exited due to take profit.
  TAKE_PROFIT

  /// Trade exited due to trailing stop.
  TRAILING_STOP

  /// Manual exit by trader.
  MANUAL_EXIT

  /// Time-based exit.
  TIME_EXIT

  /// Market close exit.
  MARKET_CLOSE

  /// Signal reversal exit.
  SIGNAL_REVERSAL

  /// Risk management exit.
  RISK_MANAGEMENT
}

// Defines quality assessment of trade outcomes.
enum TradeOutcomeQuality {
  /// Excellent trade outcome.
  EXCELLENT

  /// Good trade outcome.
  GOOD

  /// Fair trade outcome.
  FAIR

  /// Poor trade outcome.
  POOR

  /// Very poor trade outcome.
  VERY_POOR
}

// Defines market regime types for context analysis.
enum MarketRegime {
  /// Bull market regime.
  BULL

  /// Bear market regime.
  BEAR

  /// Sideways market regime.
  SIDEWAYS

  /// High volatility regime.
  HIGH_VOLATILITY

  /// Low volatility regime.
  LOW_VOLATILITY

  /// Trending regime.
  TRENDING

  /// Mean reverting regime.
  MEAN_REVERTING
}

// Defines market volatility levels.
enum VolatilityLevel {
  /// Very low volatility.
  VERY_LOW

  /// Low volatility.
  LOW

  /// Medium volatility.
  MEDIUM

  /// High volatility.
  HIGH

  /// Very high volatility.
  VERY_HIGH
}

// Defines market sentiment levels for context.
enum MarketSentimentContext {
  /// Very bearish sentiment.
  VERY_BEARISH

  /// Bearish sentiment.
  BEARISH

  /// Neutral sentiment.
  NEUTRAL

  /// Bullish sentiment.
  BULLISH

  /// Very bullish sentiment.
  VERY_BULLISH
}

// Defines volume levels for market context.
enum VolumeLevel {
  /// Very low volume.
  VERY_LOW

  /// Low volume.
  LOW

  /// Medium volume.
  MEDIUM

  /// High volume.
  HIGH

  /// Very high volume.
  VERY_HIGH
}

// Defines market conditions during execution.
enum MarketCondition {
  /// Normal market conditions.
  NORMAL

  /// Volatile market conditions.
  VOLATILE

  /// Illiquid market conditions.
  ILLIQUID

  /// High spread conditions.
  HIGH_SPREAD

  /// Pre-market conditions.
  PRE_MARKET

  /// After-hours conditions.
  AFTER_HOURS

  /// Market opening conditions.
  MARKET_OPEN

  /// Market closing conditions.
  MARKET_CLOSE
}

// Defines the types of configurations available in the system.
enum ConfigType {
  /// Configuration related to analytics and data processing
  ANALYTICS

  /// Configuration related to risk management
  RISK_MANAGEMENT

  /// Configuration related to trading strategies
  TRADING

  /// Configuration related to system settings
  SYSTEM

  /// Configuration related to user preferences
  USER_PREFERENCE
}

// Defines the status of account linking requests.
enum AccountLinkingStatus {
  /// The account linking request is pending
  PENDING

  /// Email has been sent for verification
  EMAIL_SENT

  /// Email has been verified
  VERIFIED

  /// Account linking has been approved by the user
  APPROVED

  /// Account linking has been rejected by the user
  REJECTED

  /// The account linking request has expired
  EXPIRED
}

// Defines the authentication providers supported for account linking.
enum AuthProvider {
  /// Standard email/password authentication
  CREDENTIALS

  /// Google OAuth provider
  GOOGLE

  /// GitHub OAuth provider
  GITHUB
  // Add more providers as needed
}

/// ### Models

// Represents a configuration setting in the system.
model Configuration {
  /// Unique identifier for the configuration. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// The key for the configuration setting, must be unique.
  configKey String @unique

  /// The value of the configuration setting, stored as JSON.
  configValue Json

  /// The type of the configuration setting, defined by ConfigType enum.
  type ConfigType

  /// Optional scope for namespacing the configuration (e.g., symbol, service name).
  scope String? // Optional scope for namespacing (e.g., symbol, service name)

  /// Version of the configuration setting.
  version String?

  /// A one-sentence description of the configuration setting.
  description String?

  /// A detailed, multi-paragraph description of the configuration setting, including usage examples and references.
  isActive Boolean @default(true)

  /// Indicates whether the configuration is active or not.
  expiresAt DateTime?

  /// Timestamp when the configuration setting was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the configuration setting was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  @@map("configurations")
}

// Represents the overall market sentiment at a given time.
model MarketSentiment {
  /// Unique identifier for the market sentiment record. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// The current level of market sentiment.
  sentiment MarketSentimentLevel

  /// A one-sentence description of the market sentiment, including specific references to stock market index values, recent changes, trends, and technical indicators, as well as quotes from major news sources.
  description String

  /// A detailed, multi-paragraph description of the market sentiment, including extensive analyses, references, quotes from major news sources, and links to articles.
  longDescription String

  /// Timestamp when the market sentiment record was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the market sentiment record was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  @@map(name: "market_sentiments")
}

// Represents a user session for authentication purposes.
model Session {
  /// Unique identifier for the session. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Token associated with the session for authentication. TYPESTRING.SKIP=true
  sessionToken String @unique

  /// Reference to the user who owns this session. TYPESTRING.SKIP=true
  userId String @db.Uuid

  /// Expiration date and time of the session.
  expires DateTime

  /// Relation to the User model. TYPESTRING.INCLUDE=['id','name','email'] GQL.EXCLUDE=['alpacaAccounts']
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Timestamp when the session was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the session was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  @@index([userId])
  @@map(name: "sessions")
}

// Represents a user of the trading platform.
model User {
  /// Unique identifier for the user. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// The user's full name.
  name String?

  /// The user's email address, must be unique.
  email String? @unique

  /// Timestamp when the user's email was verified. TYPESTRING.SKIP=true
  emailVerified DateTime?

  /// URL to the user's profile image.
  image String?

  /// Timestamp when the user account was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the user account was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// The role assigned to the user, determining permissions.
  role UserRole @default(USER)

  /// A short biography or description of the user.
  bio String?

  /// The user's job title or position.
  jobTitle String?

  /// The type of Alpaca account the user currently holds.
  currentAccount AlpacaAccountType @default(PAPER)

  /// Relation to the Customer model. TYPESTRING.INCLUDE=['id','name','plan'] GQL.EXCLUDE=['users']
  customer Customer? @relation(fields: [customerId], references: [id])

  /// Foreign key referencing the Customer. TYPESTRING.SKIP=true
  customerId Int?

  /// List of accounts associated with the user. TYPESTRING.SKIP=true GQL.EXCLUDE=['alpacaAccounts','user']
  accounts Account[]

  /// List of sessions associated with the user. TYPESTRING.SKIP=true GQL.EXCLUDE=['user']
  sessions Session[]

  /// List of authenticators for the user. TYPESTRING.SKIP=true GQL.EXCLUDE=['user']
  authenticators Authenticator[]

  /// The subscription plan the user is enrolled in.
  plan SubscriptionPlan?

  /// List of Alpaca accounts linked to the user. TYPESTRING.INCLUDE=['id','type'] GQL.EXCLUDE=['user']
  alpacaAccounts AlpacaAccount[]

  /// OpenAI API key for the user.
  openaiAPIKey String?

  /// OpenAI API Language model selected by the user
  openaiModel OpenaiModel? @default(GPT_4O_MINI)

  /// List of linked authentication providers. TYPESTRING.INCLUDE=['id','provider','email'] GQL.EXCLUDE=['user']
  linkedProviders LinkedProvider[]

  /// List of account linking requests. TYPESTRING.INCLUDE=['id','status','provider','email'] GQL.EXCLUDE=['user']
  accountLinkingRequests AccountLinkingRequest[]

  @@map(name: "users")
}

// Store linked authentication providers for users
model LinkedProvider {
  /// Unique identifier for the linked provider. TYPESTRING.SKIP=true
  id                String        @id @default(uuid()) @db.Uuid
  
  /// Reference to the user who owns this linked provider. TYPESTRING.SKIP=true
  userId            String        @db.Uuid
  
  /// The authentication provider type.
  provider          AuthProvider
  
  /// The unique account ID from the provider.
  providerAccountId String
  
  /// Email associated with this provider (optional).
  email             String?
  
  /// Encrypted OAuth access token (optional). TYPESTRING.SKIP=true
  accessToken       String?
  
  /// Encrypted OAuth refresh token (optional). TYPESTRING.SKIP=true
  refreshToken      String?
  
  /// Token expiration date and time (optional).
  expiresAt         DateTime?
  
  /// Timestamp when the provider was linked. TYPESTRING.SKIP=true
  linkedAt          DateTime      @default(now())
  
  /// Timestamp when the record was last updated. TYPESTRING.SKIP=true
  updatedAt         DateTime      @updatedAt
  
  /// Relation to the User model. TYPESTRING.SKIP=true GQL.EXCLUDE=['linkedProviders']
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  /// Unique constraints
  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
  
  /// Indexes for performance
  @@index([userId])
  @@index([email])
  
  @@map(name: "linked_providers")
}

// Track account linking requests for security
model AccountLinkingRequest {
  /// Unique identifier for the account linking request. TYPESTRING.SKIP=true
  id                  String                  @id @default(uuid()) @db.Uuid
  
  /// Reference to the existing user to link to. TYPESTRING.SKIP=true
  userId              String                  @db.Uuid
  
  /// Email to verify for the linking request.
  email               String
  
  /// Provider being linked.
  provider            AuthProvider
  
  /// Provider's account ID.
  providerAccountId   String
  
  /// Current status of the linking request.
  status              AccountLinkingStatus    @default(PENDING)
  
  /// Token sent in email for verification (must be unique). TYPESTRING.SKIP=true
  verificationToken   String?                 @unique
  
  /// User agent for security tracking (optional).
  userAgent           String?
  
  /// IP address for rate limiting (optional).
  ipAddress           String?
  
  /// Timestamp when the request was created. TYPESTRING.SKIP=true
  createdAt           DateTime                @default(now())
  
  /// When this request expires.
  expiresAt           DateTime
  
  /// When email was verified (optional).
  verifiedAt          DateTime?
  
  /// When user gave consent (optional).
  approvedAt          DateTime?
  
  /// When user rejected (optional).
  rejectedAt          DateTime?
  
  /// Relation to the User model. TYPESTRING.SKIP=true GQL.EXCLUDE=['accountLinkingRequests']
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  /// Indexes for performance and rate limiting
  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([verificationToken])
  @@index([expiresAt])
  @@index([ipAddress, createdAt])
  @@index([email, createdAt])
  
  @@map(name: "account_linking_requests")
}

// Represents an Alpaca trading account linked to a user.
model AlpacaAccount {
  /// Unique identifier for the Alpaca account. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// The type of Alpaca account (PAPER or LIVE).
  type AlpacaAccountType @default(PAPER)

  /// API key for authenticating requests to Alpaca. TYPESTRING.SKIP=true
  APIKey String

  /// API secret for authenticating requests to Alpaca. TYPESTRING.SKIP=true
  APISecret String

  /// JSON configuration settings for the Alpaca account.
  configuration Json?

  /// Opt-in for preparing orders for the next trading day. TYPESTRING.SKIP=true
  marketOpen Boolean @default(false)

  /// Opt-in for connecting to real-time monitoring and trading. TYPESTRING.SKIP=true
  realTime Boolean @default(false)

  /// Opt-in for enabling crypto trading on the account. TYPESTRING.SKIP=true
  cryptoTradingEnabled Boolean @default(false)

  /// List of crypto trading pairs available for the account. TYPESTRING.SKIP=true
  cryptoTradingPairs String[] @default([])

  /// Trade allocation percentage for crypto assets. TYPESTRING.SKIP=true
  cryptoTradeAllocationPct Float @default(5)

  /// Trade allocation percentage for the account. TYPESTRING.SKIP=true
  tradeAllocationPct Float @default(5)

  /// Account-level asset class allocation configuration. TYPESTRING.SKIP=true
  allocation Allocation?

  /// Minimum percentage change (from intraday high/low) to consider for a trade signal. TYPESTRING.SKIP=true
  minPercentageChange Float @default(0.5)

  /// Volume threshold for a trade signal (minimum volume qualifier to consider an asset for trading). TYPESTRING.SKIP=true
  volumeThreshold Float @default(50000)

  /// Opt-in for enabling the portfolio-level trailing stop service within Adaptic's Realtime Trade Engine. TYPESTRING.SKIP=true
  enablePortfolioTrailingStop Boolean @default(false)

  /// The portfolio-level trailing stop percentage used by the Realtime Trade Engine, if opted into the portfolio-level trailing stop service. TYPESTRING.SKIP=true
  portfolioTrailPercent Float @default(4.0)

  /// The portfolio-level profit threshold percentage used by the Realtime Trade Engine, if opted into the portfolio-level trailing stop service. TYPESTRING.SKIP=true
  portfolioProfitThresholdPercent Float @default(2.0)

  /// The portfolio-level trailing stop percentage used by the Realtime Trade Engine for reducing the trailing stop, if opted into the portfolio-level trailing stop service. TYPESTRING.SKIP=true
  reducedPortfolioTrailPercent Float @default(0.5)

  /// The initial trailing stop percentage used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  defaultTrailingStopPercentage100 Float @default(4.0)

  /// The first profit threshold at which to reduce the trailing stop used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  firstTrailReductionThreshold100 Float @default(2.0)

  /// The second profit threshold at which to further reduce the trailing stop used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  secondTrailReductionThreshold100 Float @default(5.0)

  /// The trailing stop percentage to use when profit exceeds the first threshold used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  firstReducedTrailPercentage100 Float @default(1.0)

  /// The trailing stop percentage to use when profit exceeds the second threshold used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  secondReducedTrailPercentage100 Float @default(0.5)

  /// The minimum change in trailing stop percent to warrant an adjustment used by the Position Trailing Stop Service (within the Realtime Trade Engine). TYPESTRING.SKIP=true
  minimumPriceChangePercent100 Float @default(0.5)

  /// Relation to the User model who owns this Alpaca account. TYPESTRING.SKIP=true  GQL.EXCLUDE=['alpacaAccounts', 'customer', 'accounts', 'sessions', 'authenticators']
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Foreign key referencing the User. TYPESTRING.SKIP=true
  userId String @db.Uuid

  /// Timestamp when the Alpaca account was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the Alpaca account was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// List of alerts generated for this Alpaca account. TYPESTRING.SKIP=true GQL.EXCLUDE=['alpacaAccount']
  alerts Alert[]

  @@map(name: "alpaca_accounts")
}

// Allocation settings for the Alpaca account.
model Allocation {
  /// Unique identifier for the allocation settings. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Percentage allocation for stocks in the account.
  stocks Float @default(70)

  /// Percentage allocation for cryptocurrencies in the account.
  crypto Float @default(10)

  /// Percentage allocation for options in the account.
  options Float @default(10)

  /// Percentage allocation for ETFs in the account.
  etfs Float @default(10)

  /// Reference to the Alpaca account associated with the allocation settings. TYPESTRING.SKIP=true
  alpacaAccountId String @unique @db.Uuid

  /// Relation to the AlpacaAccount model. TYPESTRING.SKIP=true GQL.EXCLUDE=['allocation']
  alpacaAccount AlpacaAccount @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  /// Timestamp when the allocation settings were created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the allocation settings were last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  @@map(name: "allocations")
}

// Represents an authenticator for multi-factor authentication.
model Authenticator {
  /// Unique identifier for the authenticator. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the user who owns this authenticator. TYPESTRING.SKIP=true
  userId String @db.Uuid

  /// Unique credential ID for the authenticator. TYPESTRING.SKIP=true
  credentialID String @unique

  /// Public key associated with the authenticator. TYPESTRING.SKIP=true
  publicKey String

  /// Counter for the number of authentication attempts. TYPESTRING.SKIP=true
  counter Int

  /// Relation to the User model. TYPESTRING.SKIP=true GQL.EXCLUDE=['authenticators']
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Timestamp when the authenticator was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the authenticator was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  @@index([userId])
  @@map(name: "authenticators")
}

// Represents an external account linked to a user for authentication.
model Account {
  /// Unique identifier for the account. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Reference to the user who owns this account. TYPESTRING.SKIP=true
  userId String @db.Uuid

  /// Type of the account (e.g., OAuth provider).
  type String

  /// Provider of the account (e.g., Google, GitHub).
  provider String

  /// Unique identifier provided by the external provider.
  providerAccountId String @unique

  /// Refresh token for the external account, if applicable. TYPESTRING.SKIP=true
  refresh_token String? @db.Text

  /// Access token for the external account, if applicable. TYPESTRING.SKIP=true
  access_token String? @db.Text

  /// Expiration time of the access token.
  expires_at Int?

  /// Type of the token (e.g., Bearer).
  token_type String?

  /// Scope of access granted by the token.
  scope String?

  /// ID token for authentication, if applicable. TYPESTRING.SKIP=true
  id_token String? @db.Text

  /// State of the session associated with the account.
  session_state String?

  /// Timestamp when the account was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the account was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// Relation to the User model. TYPESTRING.SKIP=true GQL.EXCLUDE=['accounts']
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

// Represents a token used for verifying user actions, such as password resets.
model VerificationToken {
  /// Unique identifier for the verification token. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Identifier associated with the token (e.g., user ID). TYPESTRING.SKIP=true
  identifier String

  /// The verification token string, must be unique. TYPESTRING.SKIP=true
  token String @unique

  /// Expiration date and time of the token. TYPESTRING.SKIP=true
  expires DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Represents a customer entity, which may include multiple users.
model Customer {
  /// Unique identifier for the customer. TYPESTRING.SKIP=true
  id Int @id @default(autoincrement())

  /// Reference to the authenticated user associated with the customer. TYPESTRING.SKIP=true
  authUserId String

  /// Name of the customer.
  name String?

  /// Subscription plan the customer is enrolled in.
  plan SubscriptionPlan?

  /// Unique Stripe customer ID for billing. TYPESTRING.SKIP=true
  stripeCustomerId String? @unique

  /// Unique Stripe subscription ID. TYPESTRING.SKIP=true
  stripeSubscriptionId String? @unique

  /// Stripe price ID associated with the customer's subscription. TYPESTRING.SKIP=true
  stripePriceId String?

  /// End date of the current billing period in Stripe.
  stripeCurrentPeriodEnd DateTime?

  /// Timestamp when the customer was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the customer was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// List of users associated with the customer. TYPESTRING.INCLUDE=['id','name','email'] GQL.EXCLUDE=['customer']
  users User[]

  @@index([authUserId])
}

// Represents a financial asset available for trading.
model Asset {
  /// Unique identifier for the asset. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Ticker symbol of the asset
  symbol String @unique

  /// Full name of the asset
  name String @unique

  /// Type of the asset, defined by AssetType enum.
  type AssetType

  /// URL to the asset's logo image. TYPESTRING.SKIP=true
  logoUrl String?

  /// Description of the asset. TYPESTRING.SKIP=true
  description String?

  /// Central Index Key for the asset. TYPESTRING.SKIP=true
  cik String?

  /// Stock exchange where the asset is listed. TYPESTRING.SKIP=true
  exchange String?

  /// Currency in which the asset is traded. TYPESTRING.SKIP=true
  currency String?

  /// Country where the asset is based. TYPESTRING.SKIP=true
  country String?

  /// Sector classification of the asset. TYPESTRING.SKIP=true
  sector String?

  /// Industry classification of the asset. TYPESTRING.SKIP=true
  industry String?

  /// Physical address associated with the asset. TYPESTRING.SKIP=true
  address String?

  /// Official website of the asset. TYPESTRING.SKIP=true
  officialSite String?

  /// Fiscal year-end date of the asset. TYPESTRING.SKIP=true
  fiscalYearEnd String?

  /// Date of the latest financial quarter. TYPESTRING.SKIP=true
  latestQuarter String?

  /// Market capitalization of the asset. TYPESTRING.SKIP=true
  marketCapitalization String?

  /// Earnings Before Interest, Taxes, Depreciation, and Amortization. TYPESTRING.SKIP=true
  ebitda String?

  /// Price-to-Earnings ratio. TYPESTRING.SKIP=true
  peRatio String?

  /// Price/Earnings to Growth ratio. TYPESTRING.SKIP=true
  pegRatio String?

  /// Book value per share. TYPESTRING.SKIP=true
  bookValue String?

  /// Dividend per share. TYPESTRING.SKIP=true
  dividendPerShare String?

  /// Dividend yield percentage. TYPESTRING.SKIP=true
  dividendYield String?

  /// Earnings per share. TYPESTRING.SKIP=true
  eps String?

  /// Revenue per share over the trailing twelve months. TYPESTRING.SKIP=true
  revenuePerShareTTM String?

  /// Profit margin percentage. TYPESTRING.SKIP=true
  profitMargin String?

  /// Operating margin over the trailing twelve months. TYPESTRING.SKIP=true
  operatingMarginTTM String?

  /// Return on assets over the trailing twelve months. TYPESTRING.SKIP=true
  returnOnAssetsTTM String?

  /// Return on equity over the trailing twelve months. TYPESTRING.SKIP=true
  returnOnEquityTTM String?

  /// Total revenue over the trailing twelve months. TYPESTRING.SKIP=true
  revenueTTM String?

  /// Gross profit over the trailing twelve months. TYPESTRING.SKIP=true
  grossProfitTTM String?

  /// Diluted earnings per share over the trailing twelve months. TYPESTRING.SKIP=true
  dilutedEPSTTM String?

  /// Year-over-year growth in quarterly earnings. TYPESTRING.SKIP=true
  quarterlyEarningsGrowthYOY String?

  /// Year-over-year growth in quarterly revenue. TYPESTRING.SKIP=true
  quarterlyRevenueGrowthYOY String?

  /// Analyst target price for the asset. TYPESTRING.SKIP=true
  analystTargetPrice String?

  /// Percentage of analysts rating the asset as Strong Buy. TYPESTRING.SKIP=true
  analystRatingStrongBuy String?

  /// Percentage of analysts rating the asset as Buy. TYPESTRING.SKIP=true
  analystRatingBuy String?

  /// Percentage of analysts rating the asset as Hold. TYPESTRING.SKIP=true
  analystRatingHold String?

  /// Percentage of analysts rating the asset as Sell. TYPESTRING.SKIP=true
  analystRatingSell String?

  /// Percentage of analysts rating the asset as Strong Sell. TYPESTRING.SKIP=true
  analystRatingStrongSell String?

  /// Trailing Price-to-Earnings ratio. TYPESTRING.SKIP=true
  trailingPE String?

  /// Forward Price-to-Earnings ratio. TYPESTRING.SKIP=true
  forwardPE String?

  /// Price-to-Sales ratio over the trailing twelve months. TYPESTRING.SKIP=true
  priceToSalesRatioTTM String?

  /// Price-to-Book ratio. TYPESTRING.SKIP=true
  priceToBookRatio String?

  /// Enterprise Value to Revenue ratio. TYPESTRING.SKIP=true
  evToRevenue String?

  /// Enterprise Value to EBITDA ratio. TYPESTRING.SKIP=true
  evToEbitda String?

  /// Beta coefficient measuring volatility. TYPESTRING.SKIP=true
  beta String?

  /// 52-week high price of the asset. TYPESTRING.SKIP=true
  week52High String?

  /// 52-week low price of the asset. TYPESTRING.SKIP=true
  week52Low String?

  /// 50-day moving average price. TYPESTRING.SKIP=true
  day50MovingAverage String?

  /// 200-day moving average price. TYPESTRING.SKIP=true
  day200MovingAverage String?

  /// Total number of shares outstanding. TYPESTRING.SKIP=true
  sharesOutstanding String?

  /// Date when the next dividend is paid. TYPESTRING.SKIP=true
  dividendDate String?

  /// Date when the asset goes ex-dividend. TYPESTRING.SKIP=true
  exDividendDate String?

  /// Last ask price of the asset. TYPESTRING.SKIP=true
  askPrice Float?

  /// Last bid price of the asset. TYPESTRING.SKIP=true
  bidPrice Float?

  /// Timestamp when the asset was created in the database. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the asset was last updated in the database. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// List of news article sentiments related to this asset. TYPESTRING.SKIP=true GQL.SKIP=true
  newsMentions NewsArticleAssetSentiment[]

  /// List of institutional holdings for this asset. TYPESTRING.SKIP=true GQL.EXCLUDE=['asset']
  institutionalHoldings InstitutionalHolding[] @relation("InstitutionalHoldingAsset")

  /// List of institutional flow signals for this asset. TYPESTRING.SKIP=true GQL.EXCLUDE=['asset']
  institutionalFlowSignals InstitutionalFlowSignal[] @relation("InstitutionalFlowSignalAsset")

  @@map(name: "assets")
}

// Represents a trade executed through an Alpaca account.
model Trade {
  /// Unique identifier for the trade. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the Alpaca account used for the trade. TYPESTRING.SKIP=true
  alpacaAccountId String @db.Uuid

  /// Signal that triggered the trade.
  signal TradeSignal @default(PRICE_ACTION)

  /// Strategy used to execute the trade.
  strategy TradeStrategy @default(TECHNICAL_ANALYSIS)

  /// Analysis supporting the trade decision as markdown text. TYPESTRING.SKIP=true
  analysis String

  /// summary of the trade decision (this should be a short description of the trade).
  summary String

  /// Confidence level in the trade decision.
  confidence Float

  /// Timestamp when the trade was executed. TYPESTRING.SKIP=true
  timestamp String?

  /// Timestamp when the trade record was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the trade record was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// Current status of the trade.
  status TradeStatus @default(PENDING)

  /// The symbol of the asset associated with this trade.
  symbol String

  /// List of actions associated with this trade. TYPESTRING.INCLUDE=["id","sequence","type","note","status", "order"] GQL.EXCLUDE=['trade']
  actions Action[]

  /// Entry price for the trade (average of all entry orders). TYPESTRING.SKIP=true
  entryPrice Float?

  /// Exit price for the trade (average of all exit orders). TYPESTRING.SKIP=true
  exitPrice Float?

  /// Quantity of shares/units entered. TYPESTRING.SKIP=true
  entryQty Float?

  /// Quantity of shares/units exited. TYPESTRING.SKIP=true
  exitQty Float?

  /// Total entry value (price * quantity). TYPESTRING.SKIP=true
  entryValue Float?

  /// Total exit value (price * quantity). TYPESTRING.SKIP=true
  exitValue Float?

  /// When the position was entered. TYPESTRING.SKIP=true
  entryTime DateTime?

  /// When the position was exited (null if still open). TYPESTRING.SKIP=true
  exitTime DateTime?

  /// Profit/loss amount in currency. TYPESTRING.SKIP=true
  pnlAmount Float?

  /// Profit/loss as a percentage. TYPESTRING.SKIP=true
  pnlPercent Float?

  /// Duration of the trade in minutes. TYPESTRING.SKIP=true
  durationMinutes Float?

  /// Market phase when the trade was entered. TYPESTRING.SKIP=true
  marketPhase String?

  /// Market volatility when the trade was entered. TYPESTRING.SKIP=true
  marketVolatility String?

  /// Session Horizon (i.e. the forecasted time horizon for the trade). TYPESTRING.SKIP=true
  sessionHorizonMinutes Int?

  /// Thresholds used for this trade as JSON. TYPESTRING.SKIP=true
  thresholdsJson String? @map("thresholds")

  @@map(name: "trades")
}

// Represents an action performed as part of a trade.
model Action {
  /// Unique identifier for the action. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Sequence number of the action within the trade.
  sequence Int

  /// Reference to the trade this action is part of. TYPESTRING.SKIP=true
  tradeId String @db.Uuid

  /// Type of trade action, defined by ActionType enum.
  type ActionType

  /// Whether the action is the primary action for the trade.
  primary Boolean @default(false)

  /// Additional notes or comments about the action.
  note String

  /// Current status of the trade action.
  status ActionStatus @default(STAGED)

  /// The trade this action is part of. TYPESTRING.SKIP=true GQL.SKIP=true
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  /// Timestamp when the action was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the action was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// alpacaOrderId for the Alpaca order associated with this action. TYPESTRING.SKIP=true
  alpacaOrderId String? @unique @db.Uuid

  @@map(name: "actions")
}

// Represents an alert generated by the system for the user.
model Alert {
  /// Unique identifier for the alert. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the Alpaca account associated with the alert. TYPESTRING.SKIP=true
  alpacaAccountId String @db.Uuid

  /// Message content of the alert.
  message String

  /// Type of the alert, defined by AlertType enum.
  type AlertType

  /// Indicates whether the alert has been read by the user.
  isRead Boolean @default(false)

  /// Timestamp when the alert was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the alert was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// Relation to the AlpacaAccount model. TYPESTRING.SKIP=true GQL.SKIP=true
  alpacaAccount AlpacaAccount @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  @@map(name: "alerts")
}

// Represents a news article related to financial markets.
model NewsArticle {
  /// Unique identifier for the news article. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Title of the news article.
  title String

  /// Full content of the news article.
  content String?

  /// Source of the news article (e.g., Bloomberg, Reuters).
  source String

  /// Domain of the source website.
  sourceDomain String?

  /// URL to the original news article, must be unique.
  url String @unique

  /// Sentiment analysis result of the article.
  sentiment String

  /// List of authors who wrote the article.
  authors String[]

  /// Summary or abstract of the news article.
  summary String?

  /// URL to the banner image of the article.
  bannerImage String?

  /// Publication time of the article.
  timePublished String

  /// Category or genre of the news article.
  category String?

  /// Topics covered in the news article.
  topics String[]

  /// URL to the logo image of the news source.
  logo String?

  /// Timestamp when the news article was added to the database. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the news article was last updated in the database. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  /// List of asset sentiments related to this news article. TYPESTRING.SKIP=true GQL.EXCLUDE=['news']
  assets NewsArticleAssetSentiment[]

  @@map(name: "news")
}

// Represents the sentiment of a news article towards a specific asset.
model NewsArticleAssetSentiment {
  /// Unique identifier for the sentiment record. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the associated asset. TYPESTRING.SKIP=true
  assetId String? @db.Uuid

  /// Reference to the associated news article. TYPESTRING.SKIP=true
  newsArticleId String @db.Uuid

  /// URL of the news article, must be unique.
  url String @unique

  /// Relation to the NewsArticle model. TYPESTRING.SKIP=true GQL.EXCLUDE=['assets']
  news NewsArticle @relation(fields: [newsArticleId], references: [id])

  /// Relation to the Asset model. TYPESTRING.INCLUDE=['symbol','name','type'] GQL.EXCLUDE=['newsMentions', 'orders', 'positions']
  asset Asset? @relation(fields: [assetId], references: [id], onDelete: Cascade)

  /// Relevancy score indicating how relevant the news is to the asset.
  relevancyScore String?

  /// Sentiment score derived from the news content.
  sentimentScore String?

  /// Label indicating the overall sentiment (e.g., Positive, Negative, Neutral).
  sentimentLabel String?
}

// Represents an economic event that may impact the markets.
model EconomicEvent {
  /// Unique identifier for the economic event. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Title or name of the economic event.
  title String

  /// Detailed description of the economic event.
  description String?

  /// Date and time when the economic event is scheduled to occur.
  date DateTime

  /// Importance level of the event, defined by EventImportance enum.
  importance EventImportance

  /// Timestamp when the economic event was created in the database. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the economic event was last updated in the database. TYPESTRING.SKIP=true
  updatedAt DateTime @default(now())

  @@map(name: "economic_events")
}

// Represents a scheduled option order for execution, for instances where the buyOptionOrder was created outside of market hours, and needs to be scheduled for execution at the next market open.
model ScheduledOptionOrder {
  /// Unique identifier for the scheduled option order. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Payload of the scheduled option order as a JSON object.
  payload Json

  /// Timestamp when the scheduled option order was created. TYPESTRING.SKIP=true
  status ScheduledOptionOrderStatus @default(PENDING)
}

// Institutional Sentiment History - Main time-series data
model InstitutionalSentimentHistory {
  id        String   @id @default(cuid())
  timestamp DateTime
  symbol    String

  // Overall sentiment metrics
  overallSentiment Float
  confidence       Float

  // SEC Filings Sentiment
  secFilingsSentiment        Float
  secFilingsConfidence       Float
  secInsiderTradingSignal    Float
  secInstitutionalFlowSignal Float
  secAnalystRevisionsSignal  Float
  secGuidanceChangesSignal   Float
  secShortTrend              Float
  secMediumTrend             Float
  secLongTrend               Float

  // Insider Trading Sentiment
  insiderTradingOverall   Float
  insiderBuyingSentiment  Float
  insiderSellingSentiment Float
  insiderSignificantCount Int
  insiderTotalValue       Float
  insiderRecentActivity   Int

  // Analyst Reports Sentiment
  analystOverall       Float
  analystAverageRating Float
  analystAverageTarget Float
  analystUpgrades      Int
  analystDowngrades    Int
  analystTargetChanges Int
  analystConsensus     String

  // Options Flow Sentiment
  optionsFlowOverall     Float
  optionsCallFlow        Float
  optionsPutFlow         Float
  optionsUnusualActivity Float
  optionsBlockActivity   Float
  optionsSweepActivity   Float
  optionsSentimentScore  Float

  // Institutional Flow Sentiment
  institutionalFlowOverall         Float
  institutionalNetFlow             Float
  institutionalIncreasingPositions Float
  institutionalDecreasingPositions Float
  institutionalNewPositions        Float
  institutionalClosedPositions     Float

  // Dark Pool Sentiment
  darkPoolOverall            Float
  darkPoolBuyPressure        Float
  darkPoolSellPressure       Float
  darkPoolVolumeSignificance Float
  darkPoolPriceImpact        Float

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite index for time-series queries
  @@unique([timestamp, symbol])
  @@index([symbol, timestamp])
  @@index([timestamp])
  @@map("institutional_sentiment_history")
}

// Processing Metrics for Monitoring
model InstitutionalSentimentMetrics {
  id               String   @id @default(cuid())
  timestamp        DateTime
  operation        String
  totalRecords     Int
  successCount     Int
  errorCount       Int
  processingTimeMs Int
  batchSize        Int

  createdAt DateTime @default(now())

  @@index([timestamp])
  @@index([operation])
  @@map("institutional_sentiment_metrics")
}

// Error Tracking
model InstitutionalSentimentErrors {
  id          String   @id @default(cuid())
  timestamp   DateTime
  operation   String
  error       String
  recordCount Int
  severity    String // 'low', 'medium', 'high', 'critical'

  createdAt DateTime @default(now())

  @@index([timestamp])
  @@index([severity])
  @@index([operation])
  @@map("institutional_sentiment_errors")
}

// Data Quality Alerts
model InstitutionalSentimentAlerts {
  id           String    @id @default(cuid())
  timestamp    DateTime
  type         String
  errorRate    Float
  totalRecords Int
  errorCount   Int
  severity     String // 'low', 'medium', 'high', 'critical'
  resolved     Boolean   @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([severity])
  @@index([resolved])
  @@index([type])
  @@map("institutional_sentiment_alerts")
}

// Stores weight analytics data for volatility models and analytics metadata.
model AnalyticsSnapshot {
  /// Unique identifier for the analytics snapshot. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Symbol of the asset for which analytics data is stored.
  symbol String

  /// Timestamp when the analytics snapshot was created.
  timestamp DateTime

  /// Type of analytics data stored (ENSEMBLE, VOLATILITY, REGIME, SMOOTHED).
  dataType String

  /// JSON metadata containing weights and analytics metadata.
  metadata Json

  /// Timestamp when the analytics snapshot was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the analytics snapshot was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Indexes for performance optimization
  @@index([symbol, dataType, timestamp])
  @@index([timestamp])
  @@map("analytics_snapshots")
}

// Stores analytics parameter configuration for weight analytics operations.
model AnalyticsConfiguration {
  /// Unique identifier for the analytics configuration. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Unique key identifying the configuration.
  configKey String @unique

  /// Type of configuration (WEIGHT_CONFIG, ANALYTICS_PARAMS, MODEL_PARAMS).
  configType String

  /// JSON configuration data with flexible structure.
  configValue Json

  /// Optional symbol for symbol-specific configuration.
  symbol String?

  /// Additional metadata for the configuration.
  metadata Json

  /// Timestamp when the analytics configuration was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the analytics configuration was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Indexes for performance optimization
  @@index([configKey, configType])
  @@index([configType])
  @@map("analytics_configurations")
}

// Stores connection health monitoring data for system connections.
model ConnectionHealthSnapshot {
  /// Unique identifier for the connection health snapshot. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Timestamp when the connection health was recorded.
  timestamp DateTime

  /// Type of connection being monitored (WS, HTTP, DATABASE, EXTERNAL_API).
  connectionType String

  /// Connection endpoint or identifier being monitored.
  endpoint String

  /// Current status of the connection (HEALTHY, DEGRADED, DOWN).
  status String

  /// JSON metrics containing performance and health data.
  metrics Json

  /// Additional context and metadata for the connection health.
  metadata Json

  /// Timestamp when the connection health snapshot was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Indexes for performance optimization
  @@index([timestamp])
  @@index([connectionType, status])
  @@index([endpoint, timestamp])
  @@map("connection_health_snapshots")
}

// Stores SEC EDGAR institutional holding data for financial analysis.
model InstitutionalHolding {
  /// Unique identifier for the institutional holding record. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Symbol of the asset being held by the institution.
  symbol String

  /// Name of the institutional investor.
  institutionName String

  /// Date when the SEC filing was submitted.
  filingDate DateTime

  /// Reporting date for the institutional holding.
  reportDate DateTime

  /// Number of shares held by the institution.
  sharesHeld BigInt

  /// Market value of the holding in USD.
  marketValue Decimal

  /// Percentage of the asset class held by the institution.
  percentOfClass Decimal?

  /// Change in shares from the previous filing.
  changeShares BigInt?

  /// Percentage change in shares from the previous filing.
  changePercent Decimal?

  /// Additional SEC filing data and metadata.
  metadata Json

  /// Timestamp when the institutional holding was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the institutional holding was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Relation to the Asset model. TYPESTRING.INCLUDE=['symbol','name','type'] GQL.EXCLUDE=['newsMentions']
  asset Asset @relation("InstitutionalHoldingAsset", fields: [symbol], references: [symbol])

  @@unique([symbol, institutionName, filingDate])
  /// Indexes for performance optimization
  @@index([symbol, filingDate])
  @@index([institutionName, filingDate])
  @@index([filingDate])
  @@map("institutional_holdings")
}

// Stores institutional flow analysis signals for trading decisions.
model InstitutionalFlowSignal {
  /// Unique identifier for the institutional flow signal. TYPESTRING.SKIP=true
  id String @id @default(cuid())

  /// Symbol of the asset for which the signal was generated.
  symbol String

  /// Date when the institutional flow signal was generated.
  signalDate DateTime

  /// Type of signal (BUY_PRESSURE, SELL_PRESSURE, ACCUMULATION, DISTRIBUTION).
  signalType String

  /// Strength of the signal from 0.0 to 1.0.
  signalStrength Decimal

  /// Net institutional flow amount.
  netFlow Decimal

  /// Confidence level in the signal from 0.0 to 1.0.
  confidence Decimal

  /// Analysis details and additional signal metadata.
  metadata Json

  /// Timestamp when the institutional flow signal was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Relation to the Asset model. TYPESTRING.INCLUDE=['symbol','name','type'] GQL.EXCLUDE=['newsMentions']
  asset Asset @relation("InstitutionalFlowSignalAsset", fields: [symbol], references: [symbol])

  /// Indexes for performance optimization
  @@index([symbol, signalDate])
  @@index([signalDate])
  @@index([signalType, signalStrength])
  @@map("institutional_flow_signals")
}

// Stores training data collected from trade outcomes for model retraining.
model MLTrainingData {
  /// Unique identifier for the training data record. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the original signal that generated this trade.
  signalId String

  /// Symbol of the asset that was traded.
  symbol String

  /// Type of signal that triggered the trade.
  signalType String

  /// Strength of the signal when it was generated (0.0 to 1.0).
  signalStrength Float

  /// Predicted confidence level at time of signal generation (0.0 to 1.0).
  predictedConfidence Float

  /// Whether the trade was successful.
  actualOutcomeSuccess Boolean

  /// Profit or loss amount from the trade.
  actualOutcomeProfitLoss Float

  /// Return percentage from the trade.
  actualOutcomeReturnPercent Float

  /// Sharpe ratio for the trade.
  actualOutcomeSharpeRatio Float

  /// Maximum drawdown during the trade.
  actualOutcomeMaxDrawdown Float

  /// Number of days the position was held.
  actualOutcomeDaysHeld Int

  /// Reason for exiting the trade.
  actualOutcomeExitReason TradeExitReason

  /// Quality assessment of the trade outcome.
  actualOutcomeQuality TradeOutcomeQuality

  /// Entry price for the trade.
  entryPrice Float

  /// Exit price for the trade.
  exitPrice Float

  /// Timestamp when the position was entered.
  entryTime DateTime

  /// Timestamp when the position was exited.
  exitTime DateTime

  /// Holding period in minutes.
  holdingPeriod Int

  /// Return percentage achieved.
  returnPercent Float

  /// Maximum drawdown experienced during the trade.
  maxDrawdown Float

  /// Maximum gain achieved during the trade.
  maxGain Float

  /// Volatility level during the holding period.
  volatilityDuringHold Float

  /// Market regime during the trade.
  marketContextRegime MarketRegime

  /// Market volatility level during the trade.
  marketContextVolatility VolatilityLevel

  /// Market sentiment during the trade.
  marketContextSentiment MarketSentimentContext

  /// Volume level during the trade.
  marketContextVolume VolumeLevel

  /// Market correlation factor during the trade.
  marketContextCorrelation Float

  /// Market breadth indicator during the trade.
  marketContextBreadth Float

  /// Signal features as JSON object with feature names and values.
  signalFeatures Json

  /// Execution latency in milliseconds.
  executionMetricsLatency Float

  /// Slippage amount experienced during execution.
  executionMetricsSlippage Float

  /// Market impact of the trade execution.
  executionMetricsMarketImpact Float

  /// Timing accuracy score for the execution.
  executionMetricsTimingAccuracy Float

  /// Fill quality score for the execution.
  executionMetricsFillQuality Float

  /// Order size for the trade.
  executionMetricsOrderSize Float

  /// Liquidity score at time of execution.
  executionMetricsLiquidityScore Float

  /// Expected slippage before execution.
  slippageAnalysisExpected Float

  /// Actual slippage experienced.
  slippageAnalysisActual Float

  /// Difference between expected and actual slippage.
  slippageAnalysisDifference Float

  /// Market conditions during execution.
  slippageAnalysisMarketConditions MarketCondition

  /// Timestamp of execution for slippage analysis.
  slippageAnalysisTimeOfExecution DateTime

  /// Volume at time of execution.
  slippageAnalysisVolumeAtExecution Float

  /// Spread at time of execution.
  slippageAnalysisSpreadAtExecution Float

  /// Alpha generation score for the trade.
  attributionAlphaGeneration Float

  /// Beta exposure during the trade.
  attributionBetaExposure Float

  /// Factor exposures as JSON object.
  attributionFactorExposures Json

  /// Skill versus luck assessment score.
  attributionSkillVsLuck Float

  /// Information ratio for the trade.
  attributionInformationRatio Float

  /// Timestamp when the training data record was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the training data record was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Indexes for performance optimization
  @@index([symbol, signalType])
  @@index([entryTime])
  @@index([signalId])
  @@map("ml_training_data")
}

// Stores ML model artifacts and metadata.
model ModelArtifact {
  /// Unique identifier for the model artifact. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Name of the model this artifact belongs to.
  modelName String

  /// Version of the model this artifact belongs to.
  version String

  /// Type of artifact being stored.
  artifactType ArtifactType

  /// URL or path to the stored artifact.
  storageUrl String

  /// Storage provider used to store the artifact.
  storageProvider StorageProvider

  /// File size of the artifact in bytes.
  fileSize BigInt

  /// Checksum hash for artifact integrity verification.
  checksum String

  /// Compression type used for the artifact (optional).
  compressionType String?

  /// ML framework used to create the artifact.
  metadataFramework String

  /// Python version used during training (optional).
  metadataPythonVersion String?

  /// Dependencies as JSON object with package names and versions.
  metadataDependencies Json?

  /// Date when the model was trained.
  metadataTrainingDate DateTime

  /// Size of the dataset used for training.
  metadataDatasetSize Int

  /// Hyperparameters used during training as JSON object.
  metadataHyperparameters Json

  /// Timestamp when the artifact record was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the artifact record was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// List of model versions that reference this artifact. TYPESTRING.SKIP=true GQL.EXCLUDE=['artifacts']
  modelVersions ModelVersionArtifact[]

  /// Indexes for performance optimization
  @@index([modelName, version])
  @@index([artifactType])
  @@index([storageProvider])
  @@map("model_artifacts")
}

// Junction table for ModelVersion to ModelArtifact many-to-many relationship.
model ModelVersionArtifact {
  /// Unique identifier for the relationship. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the model version. TYPESTRING.SKIP=true
  modelVersionId String @db.Uuid

  /// Reference to the model artifact. TYPESTRING.SKIP=true
  modelArtifactId String @db.Uuid

  /// Relation to the ModelVersion. TYPESTRING.SKIP=true GQL.EXCLUDE=['artifacts']
  modelVersion ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)

  /// Relation to the ModelArtifact. TYPESTRING.SKIP=true GQL.EXCLUDE=['modelVersions']
  modelArtifact ModelArtifact @relation(fields: [modelArtifactId], references: [id], onDelete: Cascade)

  /// Timestamp when the relationship was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  @@unique([modelVersionId, modelArtifactId])
  @@map("model_version_artifacts")
}

// Tracks ML model versions and their performance metrics.
model ModelVersion {
  /// Unique identifier for the model version. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Name of the model.
  modelName String

  /// Version identifier for the model.
  version String

  /// Current status of the model version.
  status ModelVersionStatus

  /// Reference to parent version if this is derived from another version.
  parentVersionId String? @db.Uuid

  /// Relation to parent ModelVersion (self-reference).
  parentVersion ModelVersion? @relation("ModelVersionHierarchy", fields: [parentVersionId], references: [id])

  /// List of child versions derived from this version. TYPESTRING.SKIP=true GQL.EXCLUDE=['parentVersion']
  childVersions ModelVersion[] @relation("ModelVersionHierarchy")

  /// List of artifacts associated with this model version. TYPESTRING.SKIP=true GQL.EXCLUDE=['modelVersion']
  artifacts ModelVersionArtifact[]

  /// Model accuracy score (0.0 to 1.0).
  performanceAccuracy Float

  /// Model precision score (0.0 to 1.0).
  performancePrecision Float

  /// Model recall score (0.0 to 1.0).
  performanceRecall Float

  /// Model F1 score (0.0 to 1.0).
  performanceF1Score Float

  /// Area under the ROC curve score (0.0 to 1.0).
  performanceAuc Float

  /// Sharpe ratio for the model's trading performance.
  performanceSharpeRatio Float

  /// Maximum drawdown observed during validation.
  performanceMaxDrawdown Float

  /// Win rate percentage for trading decisions.
  performanceWinRate Float

  /// Average return percentage per trade.
  performanceAvgReturn Float

  /// Calibration score measuring prediction reliability (0.0 to 1.0).
  performanceCalibrationScore Float

  /// Stability score measuring consistency across time (0.0 to 1.0).
  performanceStabilityScore Float

  /// Cross-validation score from model validation.
  validationCrossValidationScore Float

  /// Out-of-sample performance metrics as JSON object.
  validationOutOfSamplePerformance Json

  /// Backtest results as JSON object.
  validationBacktestResults Json

  /// Statistical test results as JSON object.
  validationStatTestResults Json

  /// Deployment environment for this version.
  deploymentEnvironment DeploymentEnvironment

  /// Traffic allocation percentage for this version (0.0 to 100.0).
  deploymentTrafficAllocation Float

  /// Rollout strategy used for deployment.
  deploymentRolloutStrategy RolloutStrategy

  /// Health check configuration as JSON object.
  deploymentHealthCheckConfig Json

  /// Timestamp when model training started.
  trainingStartTime DateTime

  /// Timestamp when model training ended.
  trainingEndTime DateTime

  /// Training duration in seconds.
  trainingDuration Int

  /// Size of the dataset used for training.
  trainingDatasetSize Int

  /// List of features used in training as JSON array.
  trainingFeaturesUsed Json

  /// Hyperparameters used during training as JSON object.
  trainingHyperparameters Json

  /// Peak memory usage during training in MB.
  trainingResourcePeakMemoryMB Int

  /// Total CPU hours consumed during training.
  trainingResourceTotalCpuHours Float

  /// GPU hours consumed during training (optional).
  trainingResourceGpuHours Float?

  /// Timestamp when the model version was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the model version was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Timestamp when the model version was deployed (optional).
  deployedAt DateTime?

  /// Timestamp when the model version was deprecated (optional).
  deprecatedAt DateTime?

  /// List of A/B tests using this version as control. TYPESTRING.SKIP=true GQL.EXCLUDE=['controlVersion']
  abTestsAsControl ABTest[] @relation("ABTestControlVersion")

  /// List of A/B tests using this version as treatment. TYPESTRING.SKIP=true GQL.EXCLUDE=['treatmentVersion']
  abTestsAsTreatment ABTest[] @relation("ABTestTreatmentVersion")

  /// List of feature importance analyses for this version. TYPESTRING.SKIP=true GQL.EXCLUDE=['modelVersion']
  featureImportanceAnalyses FeatureImportanceAnalysis[]

  /// Indexes for performance optimization
  @@unique([modelName, version])
  @@index([status])
  @@index([deploymentEnvironment])
  @@index([createdAt])
  @@map("model_versions")
}

// Manages A/B testing for model deployments.
model ABTest {
  /// Unique identifier for the A/B test. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Name of the A/B test.
  name String

  /// Description of what the A/B test is measuring.
  description String

  /// Current status of the A/B test.
  status ABTestStatus

  /// Reference to the control model version. TYPESTRING.SKIP=true
  modelVersionAId String @db.Uuid

  /// Reference to the treatment model version. TYPESTRING.SKIP=true
  modelVersionBId String @db.Uuid

  /// Relation to control ModelVersion. TYPESTRING.INCLUDE=['modelName','version','status'] GQL.EXCLUDE=['abTestsAsControl']
  controlVersion ModelVersion @relation("ABTestControlVersion", fields: [modelVersionAId], references: [id])

  /// Relation to treatment ModelVersion. TYPESTRING.INCLUDE=['modelName','version','status'] GQL.EXCLUDE=['abTestsAsTreatment']
  treatmentVersion ModelVersion @relation("ABTestTreatmentVersion", fields: [modelVersionBId], references: [id])

  /// Percentage of traffic allocated to control version (0.0 to 100.0).
  trafficSplitControlPercent Float

  /// Percentage of traffic allocated to treatment version (0.0 to 100.0).
  trafficSplitTreatmentPercent Float

  /// Target metrics to measure as JSON array of metric names.
  targetMetrics Json

  /// Primary metric for success evaluation.
  successCriteriaPrimaryMetric String

  /// Minimum detectable effect size for the test.
  successCriteriaMinimumDetectableEffect Float

  /// Statistical significance level required (e.g., 0.05).
  successCriteriaSignificanceLevel Float

  /// Statistical power level required (e.g., 0.8).
  successCriteriaPowerLevel Float

  /// Start date and time of the A/B test.
  startDate DateTime

  /// End date and time of the A/B test (optional if still running).
  endDate DateTime?

  /// Planned duration of the test in milliseconds.
  plannedDuration BigInt

  /// Control group metrics results as JSON object.
  resultsControlMetrics Json?

  /// Treatment group metrics results as JSON object.
  resultsTreatmentMetrics Json?

  /// Statistical significance results as JSON object.
  resultsStatisticalSignificance Json?

  /// P-values for each metric as JSON object.
  resultsPValues Json?

  /// Confidence intervals for metrics as JSON object.
  resultsConfidenceIntervals Json?

  /// Final recommendation from the test results.
  resultsRecommendation ABTestRecommendation?

  /// Environment where the test is running.
  metadataEnvironment String

  /// Eligibility criteria for test participants as JSON object.
  metadataEligibilityCriteria Json

  /// Exclusion criteria for test participants as JSON object.
  metadataExclusionCriteria Json

  /// Segmentation rules for the test as JSON object.
  metadataSegmentationRules Json

  /// Timestamp when the A/B test was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the A/B test was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Timestamp when the A/B test was completed (optional).
  completedAt DateTime?

  /// Indexes for performance optimization
  @@index([status])
  @@index([startDate, endDate])
  @@index([modelVersionAId])
  @@index([modelVersionBId])
  @@map("ab_tests")
}

// Stores system alerts and notifications for model performance monitoring.
model SystemAlert {
  /// Unique identifier for the system alert. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Type of system alert.
  type SystemAlertType

  /// Severity level of the alert.
  severity AlertSeverity

  /// Title of the alert.
  title String

  /// Detailed message describing the alert.
  message String

  /// Source service or component that generated the alert.
  source String

  /// Model name associated with the alert (optional).
  metadataModelName String?

  /// Model version associated with the alert (optional).
  metadataVersion String?

  /// Job ID associated with the alert (optional).
  metadataJobId String?

  /// Metrics related to the alert as JSON object (optional).
  metadataMetrics Json?

  /// Error details for the alert (optional).
  metadataErrorDetails String?

  /// Recommended actions as JSON array of strings (optional).
  metadataRecommendations Json?

  /// Current status of the alert.
  status SystemAlertStatus @default(ACTIVE)

  /// User who acknowledged the alert (optional).
  acknowledgedBy String?

  /// Timestamp when the alert was acknowledged (optional).
  acknowledgedAt DateTime?

  /// User who resolved the alert (optional).
  resolvedBy String?

  /// Timestamp when the alert was resolved (optional).
  resolvedAt DateTime?

  /// Notes about the resolution (optional).
  resolutionNotes String?

  /// Timestamp until which the alert is suppressed (optional).
  suppressedUntil DateTime?

  /// Escalation level for the alert (starts at 0).
  escalationLevel Int @default(0)

  /// Notification channels as JSON array of channel names.
  notificationChannels Json

  /// Timestamp when the alert was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the alert was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Indexes for performance optimization
  @@index([type, severity])
  @@index([status])
  @@index([source])
  @@index([createdAt])
  @@index([metadataModelName, metadataVersion])
  @@map("system_alerts")
}

// Stores feature importance analysis results for model interpretability.
model FeatureImportanceAnalysis {
  /// Unique identifier for the feature importance analysis. TYPESTRING.SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the model version being analyzed. TYPESTRING.SKIP=true
  modelVersionId String @db.Uuid

  /// Relation to ModelVersion. TYPESTRING.INCLUDE=['modelName','version','status'] GQL.EXCLUDE=['featureImportanceAnalyses']
  modelVersion ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)

  /// Type of analysis method used.
  analysisType FeatureImportanceAnalysisType

  /// Feature importance results as JSON array with structure: [{featureName, importance, rank, confidenceInterval?, pValue?}]
  featureImportances Json

  /// Global importance scores as JSON object with feature names as keys.
  globalImportance Json

  /// Local importance for specific samples as JSON array (optional).
  localImportance Json?

  /// Sample size used for the analysis.
  analysisMetadataSampleSize Int

  /// Baseline accuracy before feature analysis.
  analysisMetadataBaselineAccuracy Float

  /// Date when the analysis was performed.
  analysisMetadataAnalysisDate DateTime

  /// Time taken to compute the analysis in seconds.
  analysisMetadataComputationTime Int

  /// Analysis parameters used as JSON object.
  analysisMetadataAnalysisParameters Json

  /// Top important features as JSON array of feature names.
  insightsTopFeatures Json

  /// Redundant features identified as JSON array of feature names.
  insightsRedundantFeatures Json

  /// Features with unexpected importance as JSON array of feature names.
  insightsUnexpectedImportances Json

  /// Stability score of the feature importance results (0.0 to 1.0).
  insightsStabilityScore Float

  /// Recommendations based on the analysis as JSON array of strings.
  insightsRecommendations Json

  /// Timestamp when the analysis record was created. TYPESTRING.SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the analysis record was last updated. TYPESTRING.SKIP=true
  updatedAt DateTime @updatedAt

  /// Indexes for performance optimization
  @@index([modelVersionId])
  @@index([analysisType])
  @@index([analysisMetadataAnalysisDate])
  @@map("feature_importance_analyses")
}
